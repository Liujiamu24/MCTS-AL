import os
import pandas as pd
import numpy as np

input_dir = os.getcwd() + '/Round4/inp_pre'
output_dir = os.getcwd() + '/Round4/inp_post'

Round_num = 10

def pre_inp(lines):
    'find nodes section and elements section'
    for ind, rows in enumerate(lines):
        if ('*NODE' in rows):
            nodes_start_ind = ind + 1
        elif ('S3' in rows):
            nodes_end_ind = ind - 1
            elements2d_start_ind = ind + 1
        elif ('*ELEMENT' in rows):
            elements2d_end_ind = ind - 1
            elements3d_start_ind = ind + 1
        elif ('*****' in rows):
            endmark = ind
    
    'find the max node number in 2D elements'
    max2dnumber = 0
    for ind, rows in enumerate(lines[elements2d_start_ind : elements2d_end_ind]):
        splits = rows.split(',')
        try:
            numbers = list(map(float, splits))[-3:]
            if max(numbers) > max2dnumber:
                max2dnumber = max(numbers)
        except:
            continue
    
    'delete redundant nodes and elements'
    del lines[endmark : len(lines)]
    del lines[elements2d_start_ind - 2 : elements2d_end_ind]
    del lines[nodes_start_ind : int(nodes_start_ind + max2dnumber)]
    
    return lines

for i in range(100):
    try:
        i = i + 1
        path = input_dir+f'/{i}new.inp'
        with open(path, 'r') as f:
            lines = f.readlines()
            lines = pre_inp(lines)
            Nodes_top = []
            Nodes_bottom = []
            Ele_top = []
            Ele_bottom = []
            
            lines = lines[6:]
            
            'Add Headers'
            Headers = [ '*Heading\n',
                        '** Job name: test1 Model name: Model-1\n',
                        '** Generated by: Abaqus/CAE 2022\n',
                        '*Preprint, echo=NO, model=NO, history=NO, contact=NO\n',
                        '**\n',
                        '** PARTS\n',
                        '**\n',
                        '*Part, name=PART-1\n',
                ]
            lines = Headers + lines
            
            'find nodes section and elements section'
            for ind, rows in enumerate(lines):
                if ('*NODE' in rows):
                    nodes_start_ind = ind + 1
                elif ('*ELEMENT' in rows):
                    nodes_end_ind = ind - 1
                    element_start_ind = ind + 1
            
            top_x = 0
            top_y = 0
            top_z = 0
            bot_x = 100
            bot_y = 100
            bot_z = 100
            'Get Top Coordinates'
            for ind, rows in enumerate(lines[nodes_start_ind : nodes_end_ind]):
                splits = rows.split(',')
                try:
                    numbers = list(map(float, splits))
                    if (numbers[-1] > top_z):
                        top_z = numbers[-1]
                    if (numbers[-2] > top_y):
                        top_y = numbers[-2]
                    if (numbers[-3] > top_x):
                        top_x = numbers[-3]
                    if (numbers[-1] < bot_z):
                        bot_z = numbers[-1]
                    if (numbers[-2] < bot_y):
                        bot_y = numbers[-2]
                    if (numbers[-3] < bot_x):
                        bot_x = numbers[-3]
                except:
                    continue
                
            top_x = np.round(top_x)
            top_y = np.round(top_y)
            top_z = np.round(top_z)
            bot_x = np.round(bot_x)
            bot_y = np.round(bot_y)
            bot_z = np.round(bot_z)
            
            'ALL NODES SECTION'
            for ind, rows in enumerate(lines[nodes_start_ind : nodes_end_ind]):
                splits = rows.split(',')
                
                'find nodes in bottom line and top line'
                try:
                    numbers = list(map(float, splits))
                    if (numbers[-1] < bot_z + 1e-3):
                        Nodes_bottom.append(int(numbers[0]))
                    elif (numbers[-1] > top_z - 1e-3):
                        Nodes_top.append(int(numbers[0]))
                except:
                    continue
                
                'find element index to creat sections'
                elestartrow = lines[element_start_ind]
                mineleind = elestartrow.split(',')[0]
                
                eleendrow = lines[-1]
                maxeleind = eleendrow.split(',')[0]
                    
            'Add Endnotes'
            Endnotes = ['*Elset, elset=Set-1, generate\n',
                        mineleind +','+ maxeleind +',      1\n',
                        '** Section: Section-1\n',
                        '*Solid Section, elset=Set-1, material=Material-1\n',
                        ',\n',
                        '*End Part\n',
                        '**  \n',
                        '**\n',
                        '** ASSEMBLY\n',
                        '**\n',
                        '*Assembly, name=Assembly\n',
                        '**  \n',
                        '*Instance, name=PART-1-1, part=PART-1\n',
                        '*End Instance\n',
                        '**  \n',
                        '*End Assembly\n',
                        '** \n',
                        '** MATERIALS\n',
                        '** \n',
                        '*Material, name=Material-1\n',
                        '*Density\n',
                        ' 1.84,\n',
                        '*Elastic\n',
                        '12000.,0.34\n'
                        '*Plastic\n'
                        '195.7,          0.\n'
                        '199.5, 0.00022\n'
                        '203.1, 0.00026\n'
                        '207.3, 0.00032\n'
                        '210.5,  0.00037\n'
                        '214.34, 0.00044\n'
                        '218.52, 0.00053\n'
                        '221.69, 0.00060\n'
                        '226.46, 0.00072\n'
                        '229.43, 0.00080\n'
                        '233.1, 0.00092\n'
                        '236.91,  0.00105\n'
                        '240.24,  0.00118\n'
                        '245.25,  0.00141\n'
                        '248.93,   0.00159\n'
                        '253.05,  0.00182\n'
                        '258.24,  0.00217\n'
                        '261.81,  0.00244\n'
                        '265.89,  0.00279\n'
                        '270.36,   0.00324\n'
                        '273.97,  0.00366\n'
                        '278.14,  0.00422\n'
                        '281.94,  0.00484\n'
                        '285.094,  0.00543\n'
                        '288.6,  0.00619\n'
                        '291.32,  0.00687\n'
                        '294.12,  0.00765\n'
                        '296.72,  0.00842\n'
                        '299.51,  0.00928\n'
                        '302.11,   0.01004\n'
                        '305.19,   0.01085\n'
                        '** ----------------------------------------------------------------\n',
                        '** \n',
                        '** STEP: Step-1\n',
                        '** \n',
                        '*Step, name=Step-1, nlgeom=NO, inc=50\n',
                        '*Static\n',
                        '0.02, 1., 1e-05, 0.02\n',
                        '** \n',
                        '** OUTPUT REQUESTS\n',
                        '** \n',
                        '*Restart, write, frequency=0\n',
                        '** \n',
                        '** FIELD OUTPUT: F-Output-1\n',
                        '** \n',
                        '*Output, field, variable=PRESELECT\n',
                        '** \n',
                        '** HISTORY OUTPUT: H-Output-1\n',
                        '** \n',
                        '*Output, history, variable=PRESELECT\n',
                        '*End Step\n',
                ]
            lines = lines + Endnotes
            
            'find settings'
            for ind, rows in enumerate(lines):
                if ('End Instance' in rows):
                    SET_position = ind + 2
                
            'Add SET commands'
            bottom_set = ''
            top_set = ''
            
            count = 0
            for node in Nodes_bottom:
                count += 1
                bottom_set += str(node)
                if count == 16:
                    bottom_set += '\n'
                    count = 0
                else:
                    bottom_set += ','
            bottom_set = bottom_set[:-1] + '\n'
            
            count = 0
            for node in Nodes_top:
                count += 1
                top_set += str(node)
                if count == 16:
                    top_set += '\n'
                    count = 0
                else:
                    top_set += ','
            top_set = top_set[:-1] + '\n'
            
            
            SET_commands = ['*Node\n',
                            '1,          0.,          0.,           3\n',
                            '*Nset, nset=BOTTOM, instance=PART-1-1\n',
                            bottom_set,
                            '*Nset, nset=TOP, instance=PART-1-1\n',
                            top_set,
                            '*Nset, nset=TOPRP\n',
                            '1,\n',
                            '*Surface, type=NODE, name=TOP_CNS_, internal\n',
                            'TOP, 1.\n',
                            '*Coupling, constraint name=Constraint-1, ref node=toprp, surface=TOP_CNS_\n',
                            '*Kinematic\n',
                            ]  
            lines = lines[:SET_position] + SET_commands + lines[SET_position:]
            
            for ind, rows in enumerate(lines):
                if ('Step-1' in rows):
                    BC_position = ind + 6
            
            'Add BC commands'
            BC_commands = ['** BOUNDARY CONDITIONS\n',
            '**\n',
            '** Name: BC-1 Type: Displacement/Rotation\n',
            '*Boundary\n',
            'BOTTOM, 1, 1\n',
            'BOTTOM, 2, 2\n',        
            'BOTTOM, 3, 3\n',
            '** Name: BC-2 Type: Displacement/Rotation\n',
            '*Boundary\n',
            'TOPRP, 1, 1\n',
            'TOPRP, 2, 2\n',
            'TOPRP, 3, 3, -0.3\n',
            '**\n']
            lines = lines[:BC_position] + BC_commands + lines[BC_position:]
            
        path_new = output_dir + f'/{i}new.inp'
        with open(path_new, 'w') as f:
            f.writelines(lines)
    except:
        continue











